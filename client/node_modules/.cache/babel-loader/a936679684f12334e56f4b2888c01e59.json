{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryan.alvarez\\\\Documents\\\\webdev\\\\git\\\\mus\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); //TODO: nice use of the Nested Routes idea.\n\n_c2 = CollectionPageWithSpinner;\n\nconst ShopPage = ({\n  match,\n  updateCollections\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  let unsubscribeFromSnapshot = null;\n  useEffect(() => {\n    const collectionRef = firestore.collection('collections'); //! REST API approach is extremely nested\n    //! fetch('https://firestore.googleapis.com/v1/projects/mus-shop-db/databases/(default)/documents/collections')\n    //! .then(res => res.json())\n    //! .then(collections => console.log(collections))\n    //*Observer and Observables Pattern (provides live updates.)\n    //* collectionRef.onSnapshot( async(snapShot) => {\n    //*     const collectionsMap =  convertCollectionsSnapshotToMap(snapShot);\n    //*     updateCollections(collectionsMap);\n    //*     setIsLoading(false);\n    //* });\n    //*Promise Pattern\n\n    collectionRef.get().then(snapShot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n      updateCollections(collectionsMap);\n      setIsLoading(false);\n    });\n    return () => {// cleanup\n    };\n  }, [updateCollections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shop-page\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n        isLoading: isLoading,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n        isLoading: isLoading,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ShopPage, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n\n_c3 = ShopPage;\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");\n$RefreshReg$(_c3, \"ShopPage\");","map":{"version":3,"sources":["C:/Users/bryan.alvarez/Documents/webdev/git/mus/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","useState","Route","connect","updateCollections","firestore","convertCollectionsSnapshotToMap","WithSpinner","CollectionsOverview","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","match","isLoading","setIsLoading","unsubscribeFromSnapshot","collectionRef","collection","get","then","snapShot","collectionsMap","path","props","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACC,mBAAD,CAAlD;KAAME,8B;AACN,MAAMC,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C,C,CAEA;;MAFME,yB;;AAGN,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAST,EAAAA;AAAT,CAAD,KAAkC;AAAA;;AAE/C,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AAEA,MAAIe,uBAAuB,GAAG,IAA9B;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,aAAa,GAAGZ,SAAS,CAACa,UAAV,CAAqB,aAArB,CAAtB,CADY,CAGZ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAD,IAAAA,aAAa,CAACE,GAAd,GACMC,IADN,CACWC,QAAQ,IAAI;AAClB,YAAMC,cAAc,GAAIhB,+BAA+B,CAACe,QAAD,CAAvD;AACAjB,MAAAA,iBAAiB,CAACkB,cAAD,CAAjB;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,KALL;AAOA,WAAO,MAAM,CACT;AACH,KAFD;AAGH,GA1BQ,EA0BN,CAACX,iBAAD,CA1BM,CAAT;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,KAAK,MADT;AACU,MAAA,IAAI,EAAG,GAAES,KAAK,CAACU,IAAK,EAD9B;AAEI,MAAA,MAAM,EAAGC,KAAD,iBAAW,QAAC,8BAAD;AACnB,QAAA,SAAS,EAAEV,SADQ;AAAA,WACOU;AADP;AAAA;AAAA;AAAA;AAAA;AAFvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,KAAD;AACI,MAAA,IAAI,EAAG,GAAEX,KAAK,CAACU,IAAK,gBADxB;AAEI,MAAA,MAAM,EAAGC,KAAD,iBAAW,QAAC,yBAAD;AACX,QAAA,SAAS,EAAEV,SADA;AAAA,WACeU;AADf;AAAA;AAAA;AAAA;AAAA;AAFvB;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAhDD;;GAAMZ,Q;;MAAAA,Q;;AAkDN,MAAMa,kBAAkB,GAAIC,QAAD,KAAe;AACtCtB,EAAAA,iBAAiB,EAAGkB,cAAD,IAAoBI,QAAQ,CAACtB,iBAAiB,CAACkB,cAAD,CAAlB;AADT,CAAf,CAA3B;;AAIA,eAAenB,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkCb,QAAlC,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateCollections } from '../../redux/shop/shop.actions'\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\n//TODO: nice use of the Nested Routes idea.\r\nconst ShopPage = ({ match, updateCollections }) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    let unsubscribeFromSnapshot = null;\r\n\r\n    useEffect(() => {\r\n        const collectionRef = firestore.collection('collections'); \r\n        \r\n        //! REST API approach is extremely nested\r\n        //! fetch('https://firestore.googleapis.com/v1/projects/mus-shop-db/databases/(default)/documents/collections')\r\n        //! .then(res => res.json())\r\n        //! .then(collections => console.log(collections))\r\n\r\n        //*Observer and Observables Pattern (provides live updates.)\r\n        //* collectionRef.onSnapshot( async(snapShot) => {\r\n        //*     const collectionsMap =  convertCollectionsSnapshotToMap(snapShot);\r\n        //*     updateCollections(collectionsMap);\r\n        //*     setIsLoading(false);\r\n        //* });\r\n\r\n        //*Promise Pattern\r\n        collectionRef.get()\r\n             .then(snapShot => {\r\n             const collectionsMap =  convertCollectionsSnapshotToMap(snapShot);\r\n             updateCollections(collectionsMap);\r\n             setIsLoading(false);\r\n            });\r\n        \r\n        return () => {\r\n            // cleanup\r\n        } \r\n    }, [updateCollections])\r\n\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route \r\n                exact path={`${match.path}`} \r\n                render={(props) => <CollectionsOverviewWithSpinner \r\n                isLoading={isLoading} {...props}/>}\r\n            />\r\n            <Route \r\n                path={`${match.path}/:collectionId`} \r\n                render={(props) => <CollectionPageWithSpinner \r\n                        isLoading={isLoading} {...props}/>} \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateCollections: (collectionsMap) => dispatch(updateCollections(collectionsMap)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}